[project]
name = "answer-app"
version = "0.2.0"
description = "Vertex AI Search Answer App"
license = "MIT"
license-files = [
    "LICENSE",
]
readme = "README.md"
requires-python = ">=3.13,<4"
authors = [
    { name = "doug", email = "110487462+doughayden@users.noreply.github.com" },
]
dependencies = [
    "fastapi (>=0.115.6,<0.116.0)",
    "google-api-core (>=2.24.0,<3.0.0)",
    "google-auth (>=2.37.0,<3.0.0)",
    "google-cloud-bigquery (>=3.27.0,<4.0.0)",
    "google-cloud-discoveryengine (>=0.13.5,<0.14.0)",
    "httpx (>=0.28.1,<0.29.0)",
    "pydantic (>=2.10.4,<3.0.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "uvicorn (>=0.34.0,<0.35.0)"
]

[project.scripts]
write_secrets = "package_scripts.write_secrets_toml:run"
client = "client.client:main"
release = "semantic_release.cli:main"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [
    { include = "answer_app", from = "src" },
    { include = "client", from = "src" },
    { include = "package_scripts", from = "src" },
]

[tool.poetry.group.client.dependencies]
authlib = "^1.5.2"
google-auth = "^2.37.0"
python-dotenv = "^1.1.0"
rich = "^13.9.4"
streamlit = "^1.43.2"
streamlit-feedback = "^0.1.4"

[tool.poetry.group.dev.dependencies]
click = "^8.2.1"
coverage = "^7.6.10"
ipykernel = "^6.29.5"
pytest = "^8.3.4"
pytest-asyncio = "^0.25.1"
pytest-cov = "^6.0.0"
pytest-httpx = "^0.35.0"
python-semantic-release = "^9.15.1"
pytz = "^2024.2"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
# # Uncomment below to enable logging configuration.
# log_cli = true
# log_cli_level = "DEBUG"
# log_cli_format = "%(levelname)-9s [%(name)s.%(funcName)s:%(lineno)5s] %(message)s"
# log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "CLAUDE.md:0.2.0",
    "README.md:version-0.2.0",
]
build_command = "poetry build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false
major_on_zero = false
tag_format = "v{version}"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.remote]
name = "origin"
token = { env = "GITHUB_TOKEN" }
